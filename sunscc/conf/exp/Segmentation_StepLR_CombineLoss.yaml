# @package _global_
trainer:
  _target_: pytorch_lightning.Trainer
  max_epochs: 30
  gpus: ${gpus}
  auto_scale_batch_size: false
  log_every_n_steps: 2

  # # For test purpose only (uncomment to test on a small subset)
  # limit_train_batches: 1
  # limit_val_batches: 1
  # limit_test_batches: 1
  # limit_predict_batches: 1

logger:
  - _target_: pytorch_lightning.loggers.WandbLogger
    # name: 'test'
    project: 'sunscc'
    save_dir: "."
# logger: []



module:
  optimizer: torch.optim.AdamW
  # ######## WORKS
  loss:
    _target_: sunscc.loss.CombineLosses
    sublossA: 
      _target_: torch.nn.CrossEntropyLoss
    sublossB: 
      _target_: sunscc.loss.LogCosHDiceLoss
      softmax: true
      to_onehot_target: true
      include_background: true
    ce_ratio: 0.5
    include_background: true
  
  #class_weights: [1,20]
  class_weights: [1,1,1]
  
  scheduler:
    _target_: torch.optim.lr_scheduler.StepLR
    step_size: 250
    gamma: 0.9
    last_epoch: -1

  scheduler_interval: 'epoch'

model:
  input_format: ["image"]
  output_format: ["segmentation"]
  classes: [ "penumbra", "umbra"]
  #classes: [ "sunspot"]
  _target_: sunscc.model.ConfUnet
  model_cfg:
    _target_: sunscc.model.ModelConfig
  block: double
  architecture:
    first: 32
    enc:
      width: [32, 64, 128, 256, 512, 512, 512]
      repeat: [1,1,1,1,1,1,1]
    dec:
      width: [512, 512, 256, 128, 64, 32]
      repeat: [1, 1, 1, 1, 1, 1]



use_dtypes: "???"

dataset:
  _target_: sunscc.dataset.SunSCCDataModule
  #data_dir: "./datasets/segmentation"
  # set data_dir to the path of the dataset using the environment variable SUNSCCDATASET_PATH
  data_dir: ${oc.env:SUNSCCDATASET_PATH}/datasets/segmentation
  dataset_name: "All"
  batch_size: 16
  num_workers: 32
  # num_workers: 12
  
  train_dataset:
    _target_: sunscc.dataset.DeepsunSegmentationDataset
    partition: "train"
    dtypes: ${use_dtypes}

    transforms:
      - _target_: sunscc.transforms.DeepsunRandomFlip
      - _target_: sunscc.transforms.DeepsunRandomRotate
      - _target_: sunscc.transforms.DeepsunCropNonEmptyMaskIfExists
        height: 512
        width: 512
      - _target_: sunscc.transforms.DeepsunRandomMaskSelector
      # - _target_: sunscc.transforms.DeepsunMaskMerger
      #   p_add: 0.5
        

  val_dataset:
    _target_: sunscc.dataset.DeepsunSegmentationDataset
    partition: "test"
    dtypes: ${use_dtypes}
    transforms:
      - _target_: sunscc.transforms.DeepsunRandomFlip
      - _target_: sunscc.transforms.DeepsunRandomRotate
      - _target_: sunscc.transforms.DeepsunCropNonEmptyMaskIfExists
        height: 512
        width: 512
      - _target_: sunscc.transforms.DeepsunRandomMaskSelector
      # - _target_: sunscc.transforms.DeepsunMaskMerger
      #   p_add: 0.5
      
  test_dataset:     
    _target_: sunscc.dataset.DeepsunSegmentationTestDataset
    partition: "test_GT"
    dtypes: ['image', 'GroundTruth']
    patch_side: 512
    transforms:
      - _target_: sunscc.transforms.DeepsunRandomFlip
      - _target_: sunscc.transforms.DeepsunRandomRotate
      - _target_: sunscc.transforms.DeepsunCropNonEmptyMaskIfExists
        height: 512
        width: 512

callbacks:
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    dirpath: "./models"
    save_last: true
    monitor: val_meaniou
    mode: max
    filename: "{epoch}-{val_meaniou:.2f}"
  wandb:
    _target_: sunscc.callback.WandBCallback
    log_models: false
  LR_monitor:
    _target_: "pytorch_lightning.callbacks.LearningRateMonitor"
  Save_prediction:
    _target_: 'sunscc.callback.SavePredictionMaskCallback2'
    output_dir: 'predictions'
    max_batch_size: ${dataset.batch_size}
