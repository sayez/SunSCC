# @package _global_
defaults:
  - override /module: base_classification


trainer:
  _target_: pytorch_lightning.Trainer
  max_epochs: 30
  devices: ${gpus}
  # gpus: ${gpus}
  # auto_scale_batch_size: false
  log_every_n_steps: 2

# logger: []
logger:
  # - _target_: pytorch_lightning.loggers.CSVLogger
  #   save_dir: 'csv_metrics'
  - _target_: pytorch_lightning.loggers.WandbLogger
    # name: 'test'
    project: 'Deepsun_McIntosh'
    resume: 'allow'
    save_dir: "."

use_dtypes: "???"
use_classes: [ 'A','B','C','SuperGroup','H']
use_json: '???'

first_classes: [ 'A','B','C','SuperGroup','H']
second_classes: [ 'x','r','sym','asym']
third_classes: [ "x","o","frag"]

module:
  _target_: sunscc.module.McIntoshClassifier_Superclasses
  classifier: "${model}"
  # parts_to_train: ${model.parts_to_train}
  lr: 1e-4
  optimizer: torch.optim.AdamW
  loss:
    _target_: torch.nn.CrossEntropyLoss
  
  class1_weights: [1,1,1,1,1]
  class2_weights: [1,1,1,1]
  class3_weights: [1,1,1]
  
  # scheduler:
  #   _target_: torch.optim.lr_scheduler.MultiStepLR
  #   milestones: [25, 35]
  #   gamma: 0.01
  # scheduler_interval: 'epoch'
  scheduler:
    _target_: torch.optim.lr_scheduler.CosineAnnealingLR
    T_max: "???"
    eta_min: 1e-6
    last_epoch: -1
  scheduler_interval: 'step'

img_side: 256
focus_on_group: false
random_move: false
random_move_percent: .2


dataset:
  _target_: sunscc.dataset.SunSCCBalancedDataModule
  data_dir: "/globalscratch/users/n/s/nsayez/Classification_dataset/"
  dataset_name: "2002-2019_2"
  batch_size: 16
  num_workers: 12
  char_to_balance: "class1"
  
  train_dataset:
    _target_: sunscc.dataset.ClassificationDatasetSuperclasses_fast
    partition: "train"
    dtypes: ${use_dtypes}
    classes: ${use_classes}
    first_classes: ${first_classes}
    second_classes: ${second_classes}
    third_classes: ${third_classes}
    dataset_file: ${use_npy}
    transforms:
      - _target_: sunscc.transforms.Deepsun_Focus_Move
        standard_height: ${img_side}
        standard_width: ${img_side}
        focus_on_group: ${focus_on_group}
        random_move: ${random_move}
        random_move_percent: ${random_move_percent}
      - _target_: sunscc.transforms.DeepsunClassifRandomRotate
      - _target_: sunscc.transforms.DeepsunClassifRandomFlip


  val_dataset:
    _target_: sunscc.dataset.ClassificationDatasetSuperclasses_fast
    partition: "val"
    dtypes: ${use_dtypes}
    classes: ${use_classes}
    first_classes: ${first_classes}
    second_classes: ${second_classes}
    third_classes: ${third_classes}
    dataset_file: ${use_npy}
    transforms:
      - _target_: sunscc.transforms.Deepsun_Focus_Move
        standard_height: ${img_side}
        standard_width: ${img_side}
        focus_on_group: ${focus_on_group}
        random_move: ${random_move}
        random_move_percent: ${random_move_percent}
      - _target_: sunscc.transforms.DeepsunClassifRandomRotate
      - _target_: sunscc.transforms.DeepsunClassifRandomFlip
   
  test_dataset:     
    _target_: sunscc.dataset.ClassificationDatasetSuperclasses_fast
    partition: "test"
    dtypes: ${use_dtypes}
    classes: ${use_classes}
    first_classes: ${first_classes}
    second_classes: ${second_classes}
    third_classes: ${third_classes}
    dataset_file: ${use_npy}
    transforms:
      - _target_: sunscc.transforms.Deepsun_Focus_Move
        standard_height: ${img_side}
        standard_width: ${img_side}
        focus_on_group: ${focus_on_group}
        random_move: false # ${random_move}
        random_move_percent: 0 #${random_move_percent}
      # - _target_: sunscc.transforms.DeepsunClassifRandomRotate
      # - _target_: sunscc.transforms.DeepsunClassifRandomFlip


callbacks:
  wandb:
    _target_: sunscc.callback.WandBCallback
    log_models: false
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    dirpath: "./models"
    save_last: true
    monitor: val_acc1
    mode: max
    filename: "{epoch}-{val_meaniou:.2f}"
  # model_last_weights:
  #   _target_: pytorch_lightning.callbacks.ModelCheckpoint
  #   dirpath: "./models"
  #   save_last: true
  #   monitor: val_meaniou
  #   mode: max
  #   save_weights_only: true
  #   filename: "{epoch}-{val_meaniou:.2f}_weights"
  LR_monitor:
    _target_: "pytorch_lightning.callbacks.LearningRateMonitor"
  # Save_prediction:
  #   _target_: 'sunscc.callback.ShowMcIntoshClassificationPredictionsCallback'
  #   output_dir: 'predictions'
  ConfusionMatrix:
    _target_: 'sunscc.callback.McIntoshClassificationConfusionMatrixCallback'
    normalize: 'true'
  # train_show_input_output:
  #   _target_: 'sunscc.callback.ShowMcIntoshClassificationInputOutputsCallback'
